# By Sharon Campbell, Ken Simon, and Joe Beda for Heptio
#deploy the PHP and Apache container from heptio/example-__CI_BUILD_REF_SLUG__
apiVersion: extensions/v1beta1
kind: Namespace
metadata:
  name: __KUBE_NAMESPACE__
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
kind: Deployment
metadata:
  namespace: __KUBE_NAMESPACE__
  name: __CI_BUILD_REF_SLUG__
  labels:
    cloudcapital/example: lamp
# number of PHP pods (replicas) to run
# increase this number if you need to scale PHP horizontally
# since we have 3, the LoadBalancer will serve our app from all 3
spec:
  replicas: 3
  # The number of old deployments you want to keep around
  revisionHistoryLimit: 5
  # make replicas of kubernetes objects with the label app: __CI_BUILD_REF_SLUG__
  selector:
    matchLabels:
      app: __CI_BUILD_REF_SLUG__
  # the pod template describes what type of pod to create
  # when the defined number of replicas are not up
  # in this case, the pod that will be created is the one labeled app: __CI_BUILD_REF_SLUG__
  template:
    metadata:
      # this label is referenced by the selector for the Deployment, which creates pods
      # and by the selector for the Service, which creates the LoadBalancer
      labels:
        app: __CI_BUILD_REF_SLUG__
    # details of what container(s) will actually be run in this pod
    spec:
      # deploys PHP and Apache and our custom application from the specified Docker Hub image
      containers:
      # deploys this custom PHP image from Docker Hub
      # https://hub.docker.com/r/heptio/example-__CI_BUILD_REF_SLUG__/
      - image: registry.gitlab.com/cloudcapital/kubernetes-test:__VERSION__
        # download a fresh copy of the image if available, even if it has the same version label
        imagePullPolicy: Always
        name: __CI_BUILD_REF_SLUG__
        #reserving resources from our cluster
        # env sets environment variables in the container
        # exactly like environment variables set from the command line
        # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
        livenessProbe:
          tcpSocket:
            port: 80
        # make our mysql pod available within the cluster on port 80
        ports:
        - containerPort: 80

---
# expose PHP and Apache on port 80 to the world through a load balancer

apiVersion: v1
# https://kubernetes.io/docs/concepts/services-networking/service/
kind: Service
metadata:
  # the name web here means you can reference the PHP pods
  # using the host web.default.svc.cluster.local from within the cluster
  name: web-__CI_BUILD_REF_SLUG__
  namespace: __KUBE_NAMESPACE__
  labels:
    "cloudcapital/example": lamp
spec:
  ports:
  # make the service available on this port
  - port: 80
    protocol: TCP
  selector:
    # apply this service to the pod with the label app: mysql
    app: __CI_BUILD_REF_SLUG__
  # a LoadBalancer makes this service available over the public internet
  # all of our PHP/Apache pods are load balanced behind a single public network address

  # this works because we have cloudprovider=aws set on the cluster
  # this actually provisions AWS Elastic Load Balancing https://aws.amazon.com/elasticloadbalancing/
  # try running "kubectl get service web -o wide" after you create the Service
  # You'll get a lengthy DNS name which you can use with a DNS CNAME entry with your own domain
  # like http://xxxxxxxxxxxxxxx.us-east-2.elb.amazonaws.com/
  # this is where the PHP app will be publicly viewable

  # https://kubernetes.io/docs/getting-started-guides/scratch/#cloud-providers
  # https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-__CI_BUILD_REF_SLUG__
  namespace: __KUBE_NAMESPACE__
  labels:
    app: __CI_BUILD_REF_SLUG__
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
        - __CI_BUILD_REF_SLUG__.116.203.190.175.xip.io
      # the secret used here is an unsigned wildcard cert for demo purposes
      # use your own or comment this out
      #secretName: tls-wildcard-demo
  rules:
    - host: __CI_BUILD_REF_SLUG__.116.203.190.175.xip.io
      http:
        paths:
          - path: /
            backend:
              serviceName: web-__CI_BUILD_REF_SLUG__
              servicePort: 8000